Script started on Fri 15 Feb 2019 02:53:28 PM EST
]0;kangste3@b3185-03:/h/u17/c7/00/kangste3/CSC209/kangste3/lab6b3185-03:~/CSC209/kangste3/lab6$ gdb ovr[Kerflow
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) line 30
Undefined command: "line".  Try "help".
(gdb) list 30
25	    printf("\n");
26	
27	
28	    printf("Initial values:\n");
29	    printf("i = %d\n", i);
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33	    printf("\n");
34	
(gdb) list 34
29	    printf("i = %d\n", i);
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33	    printf("\n");
34	
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
(gdb) break 37 
Breakpoint 1 at 0x40083b: file overflow.c, line 37.
(gdb) break 36[K5
Breakpoint 2 at 0x40082f: file overflow.c, line 35.
(gdb) run
Starting program: /h/u17/c7/00/kangste3/CSC209/kangste3/lab6/overflow 
Address of the variables:
7fffffffe6f0 -> &after[0]
7fffffffe6f4 -> &after[1]
7fffffffe6f8 -> &after[2]
7fffffffe6fc -> &after[3]
7fffffffe6e0 -> &a[0]
7fffffffe6e4 -> &a[1]
7fffffffe6e8 -> &a[2]
7fffffffe6ec -> &a[3]
7fffffffe6d0 -> &before[0]
7fffffffe6d4 -> &before[1]
7fffffffe6d8 -> &before[2]
7fffffffe6dc -> &before[3]
7fffffffe6cc -> &i
7fffffffe6c8 -> &index

Initial values:
i = 255
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 2, main () at overflow.c:36
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) contun[K[Kinue
Continuing.

Breakpoint 1, main () at overflow.c:37
37	        a[i] = i * 10;
(gdb) continue[K[K[K[K[K[K[K[Kdisplay array
No symbol "array" in current context.
(gdb) display after
1: after = {10, 10, 10, 10}
(gdb) display after[K[K[K[K[K[K[K[K[K[K[K[K[Kcontinue
Continuing.
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}

Breakpoint 1, main () at overflow.c:37
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next

Breakpoint 1, main () at overflow.c:37
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next

Breakpoint 1, main () at overflow.c:37
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next

Breakpoint 1, main () at overflow.c:37
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {40, 10, 10, 10}
(gdb) next[K[K[K[Kprint &(after[0])
$1 = (int *) 0x7fffffffe6f0
(gdb) print &a[4]
$2 = (int *) 0x7fffffffe6f0
(gdb) exit
Undefined command: "exit".  Try "help".
(gdb) y[Kquit
A debugging session is active.

	Inferior 1 [process 31627] will be killed.

Quit anyway? (y or n) y
]0;kangste3@b3185-03:/h/u17/c7/00/kangste3/CSC209/kangste3/lab6b3185-03:~/CSC209/kangste3/lab6$ exit
exit

Script done on Fri 15 Feb 2019 02:56:29 PM EST
